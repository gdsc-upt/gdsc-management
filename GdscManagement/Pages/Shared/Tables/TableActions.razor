@using GdscManagement.Common.Features.Users
@using GdscManagement.Common.Repository
@using GdscManagement.Pages.Shared.Components
@using GdscManagement.Features.Base
@using GdscManagement.Common.Features.Base
@typeparam TViewModel where TViewModel : IViewModel
@typeparam TModel where TModel : IModel
@inject IBaseRepository<TModel> Repo

<MudPaper Class="pa-4 mt-5 d-flex">
    <AuthorizeView Roles="@Roles.Admin">
        <Authorized>
            <ErrorButton
                OnClick="() => Delete()"
                Tooltip="Select items to delete"
                Disabled="@(SelectedItems.Count == 0)"
                Icon="fa-dumpster fa-bounce">
            </ErrorButton>

            <MudSpacer></MudSpacer>

            <PrimaryButton
                Text="New user"
                Href="/users#add"
                Tooltip="Add new example">
            </PrimaryButton>
        </Authorized>

        <NotAuthorized>
            <ErrorButton
                Tooltip="Only admins can delete"
                Disabled="true"
                Icon="fa-dumpster">
            </ErrorButton>

            <MudSpacer></MudSpacer>

            <PrimaryButton
                Text="Open add page"
                Disabled="true"
                Tooltip="Only admins can add">
            </PrimaryButton>
        </NotAuthorized>
    </AuthorizeView>
</MudPaper>

@code {

    [Parameter]
    public HashSet<TViewModel> SelectedItems { get; set; } = new();

    [Parameter]
    public EventCallback<string> OnActionExecuted { get; set; }

    private async Task Delete()
    {
        Console.WriteLine("try delete");
        await Repo.DeleteAsync(SelectedItems.Select(item => item.Id).ToArray());
        await OnActionExecuted.InvokeAsync("delete");
    }

}
