@using GdscManagement.Common.Features.Users.Models
@using GdscManagement.Features.Users
@using GdscManagement.Utilities
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using System.Reflection
@using System.ComponentModel.DataAnnotations
@using GdscManagement.Utilities.Attributes
@using GdscManagement.Utilities.Extensions
@using GdscManagement.Pages.Shared
@inject ISnackbar Snackbar
@inherits BaseComponent<User, UserViewModel>
@inject ViewModelHelper<UserViewModel> Helper

<span id="@(IsEdit ? "edit" : "add")"></span>

<EditForm Model="@_viewModel" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator/>
    <MudGrid>
        <MudItem xs="12">
            <MudCard>
                <MudCardContent>
                    @foreach (var property in _viewModel.GetType().GetProperties())
                    {
                        var isReadonly = property.GetExtrasInfo().ReadOnly;
                        if (property.IsHidden() || (isReadonly && !IsEdit))
                        {
                            continue;
                        }

                        <FieldBuilder Property="property" ViewModel="_viewModel"/>
                    }
                </MudCardContent>

                <MudCardActions>
                    <MudButton
                        Variant="Variant.Outlined"
                        Color="Color.Primary"
                        StartIcon="fa-solid fa-circle-left"
                        IconColor="Color.Primary"
                        Class="ml-auto"
                        OnClick="GoBack">
                        Back
                    </MudButton>

                    <MudSpacer></MudSpacer>

                    <MudButton
                        ButtonType="ButtonType.Submit"
                        Variant="Variant.Filled"
                        StartIcon="fa-solid fa-circle-check"
                        IconColor="Color.Surface"
                        Color="Color.Success"
                        Class="ml-auto">
                        @(IsEdit ? "Update" : "Add")
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>


@code {

    [Parameter]
    public User? Model { get; set; }

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    UserViewModel _viewModel = new();
    bool IsEdit => Model is not null;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _viewModel = Model is null ? _viewModel : Map(Model);
    }

    async Task<IdentityResult?> AddExample()
    {
        if (Model is null) return await UserManager.CreateAsync(Map(_viewModel));
        Snackbar.Add("Something went wrong, there's and existing Model", Severity.Error);
        return null;
    }

    async Task<IdentityResult?> EditExample()
    {
        if (Model?.Id is null)
        {
            Snackbar.Add("Something went wrong, Model is null", Severity.Error);
            return null;
        }

        var original = await UserManager.FindByIdAsync(Model.Id);
        if (original is null)
        {
            Snackbar.Add("Something went wrong, Model is null", Severity.Error);
            return null;
        }

        var edited = Map(_viewModel);
        foreach (var property in edited.GetType().GetProperties())
        {
            property.SetValue(original, property.GetValue(edited));
        }

        return await UserManager.UpdateAsync(original);
    }

    void GoBack()
    {
        Navigation.NavigateTo(UserRoutes.Main);
    }

    async Task OnSubmit()
    {
        var result = IsEdit ? await EditExample() : await AddExample();
        if (result != null && result.Errors.Any())
        {
            Snackbar.Add(string.Join(",", result.Errors.Select(e => e.Description)), Severity.Error);
            return;
        }

        StateHasChanged();
        var message = IsEdit ? "User updated successfully" : "User added successfully";
        Snackbar.Add(message, Severity.Success);

        await OnValidSubmit.InvokeAsync();
        _viewModel = new UserViewModel();
        GoBack();
    }

}
