@attribute [Route(UserRoutes.Main)]
@using GdscManagement.Common.Features.Users
@using GdscManagement.Features.Users
@using GdscManagement.Common.Features.Users.Models
@using GdscManagement.Pages.Users.Components
@using GdscManagement.Utilities.Extensions
@using Microsoft.EntityFrameworkCore
@inherits BaseComponent<User, UserViewModel>

<PageTitle>Users</PageTitle>

<UsersTableActions SelectedItems="@_selected"></UsersTableActions>

<UsersTable Loading="_loading" OnActionExecuted="OnActionExecuted" Items="_items" @bind-SelectedItems="_selected"/>

<UsersTableActions SelectedItems="@_selected"></UsersTableActions>

<AuthorizeView Roles="@Roles.Admin">
    <MudPaper Elevation="0" Class="my-7">
      <AddEditUserForm OnValidSubmit="FetchData"></AddEditUserForm>
    </MudPaper>
</AuthorizeView>

@code {
    bool _loading;
    IEnumerable<UserViewModel> _items = new List<UserViewModel>();
    HashSet<UserViewModel> _selected = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await FetchData();
        _loading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Navigation.NavigateToFragment(JsRuntime);
        }
    }

    Task OnActionExecuted(string action)
    {
        return action == "delete" ? FetchData() : Task.CompletedTask;
    }

    async Task FetchData()
    {
        Console.WriteLine("Fetching data...");
        _items = Map(await UserManager.Users.AsNoTracking().ToListAsync());
    }

}
